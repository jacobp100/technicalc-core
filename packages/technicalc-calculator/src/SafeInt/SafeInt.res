type t // Internally option<int>

external ofInt: int => t = "%identity"
external toInt: t => option<int> = "%identity"
@module("./SafeInt.js") external abs: t => t = "abs"
@module("./SafeInt.js") external neg: t => t = "neg"
@module("./SafeInt.js") external add: (t, t) => t = "add"
@module("./SafeInt.js") external sub: (t, t) => t = "sub"
@module("./SafeInt.js") external mul: (t, t) => t = "mul"
@module("./SafeInt.js") external div: (t, t) => t = "div"
@module("./SafeInt.js") external pow: (t, t) => t = "pow"
@module("./SafeInt.js") external rem: (t, t) => t = "mod"
@module("./SafeInt.js") external mod: (t, t) => t = "mod"
@module("./SafeInt.js") external \"~-": t => t = "neg"
@module("./SafeInt.js") external \"+": (t, t) => t = "add"
@module("./SafeInt.js") external \"-": (t, t) => t = "sub"
@module("./SafeInt.js") external \"*": (t, t) => t = "mul"
@module("./SafeInt.js") external \"/": (t, t) => t = "div"
@module("./SafeInt.js") external \"**": (t, t) => t = "pow"
@module("./SafeInt.js") external absInt: int => option<int> = "abs"
@module("./SafeInt.js") external negInt: int => option<int> = "neg"
@module("./SafeInt.js") external addInt: (int, int) => option<int> = "add"
@module("./SafeInt.js") external subInt: (int, int) => option<int> = "sub"
@module("./SafeInt.js") external mulInt: (int, int) => option<int> = "mul"
@module("./SafeInt.js") external divInt: (int, int) => option<int> = "div"
@module("./SafeInt.js") external powInt: (int, int) => option<int> = "pow"
@module("./SafeInt.js") external remInt: (int, int) => option<int> = "mod"
@module("./SafeInt.js") external modInt: (int, int) => option<int> = "mod"
