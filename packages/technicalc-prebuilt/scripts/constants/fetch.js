/* eslint-disable no-restricted-syntax, no-await-in-loop, no-console */
import fs from "fs";
import fetch from "node-fetch";

// Copy urls from https://physics.nist.gov/cgi-bin/cuu/Category?view=html&All+values.x=135&All+values.y=16
const names = [
  "mal",
  "malc2",
  "malc2mev",
  "malu",
  "mmal",
  "aral",
  "malsme",
  "malsmp",
  "angstar",
  "u",
  "uj",
  "muc2mev",
  "uev",
  "uhr",
  "uhz",
  "uminv",
  "Ruj",
  "uk",
  "Rukg",
  "auhypol",
  "au2hypol",
  "Ahbar",
  "Ae",
  "aucd",
  "aucur",
  "auedm",
  "auefld",
  "auefg",
  "auepol",
  "auep",
  "aueqm",
  "Ahr",
  "auforce",
  "Abohrrada0",
  "aumdm",
  "aumfd",
  "aumag",
  "Ame",
  "aumom",
  "auperm",
  "aut",
  "auvel",
  "na",
  "mub",
  "mubev",
  "mubshhz",
  "mubshcminv",
  "mubskk",
  "bohrrada0",
  "k",
  "kev",
  "kshhz",
  "kshcminv",
  "z0",
  "re",
  "ecomwl",
  "conqu2e2sh",
  "ampere90",
  "charge90",
  "capacitance90",
  "inductance90",
  "kj90",
  "ohm90",
  "volt90",
  "rk90",
  "power90",
  "xucukalph1",
  "gdn",
  "mud",
  "mudsmub",
  "mudsmun",
  "md",
  "mdc2",
  "mdc2mev",
  "mdu",
  "mmd",
  "ard",
  "rd",
  "mudsmuem",
  "mdsme",
  "mudsmunn",
  "mudsmup",
  "mdsmp",
  "esme",
  "gem",
  "gammae",
  "gammaebar",
  "muem",
  "ae",
  "muemsmub",
  "muemsmun",
  "me",
  "mec2",
  "mec2mev",
  "meu",
  "mme",
  "are",
  "mesmalpha",
  "muemsmuhp",
  "muemsmupp",
  "evj",
  "evu",
  "evhr",
  "evhz",
  "evminv",
  "Revj",
  "evk",
  "evkg",
  "muemsmud",
  "mesmd",
  "mesmh",
  "muemsmumum",
  "mesmmu",
  "muemsmunn",
  "mesmn",
  "muemsmup",
  "mesmp",
  "mesmtau",
  "mesmt",
  "e",
  "eshbar",
  "f",
  "gf",
  "alph",
  "c11strc",
  "c1l",
  "hr",
  "hrev",
  "hru",
  "Rhrev",
  "hrhz",
  "hrminv",
  "hrj",
  "hrk",
  "hrkg",
  "ghn",
  "muh",
  "muhsmub",
  "muhsmun",
  "mh",
  "mhc2",
  "mhc2mev",
  "mhu",
  "mmh",
  "arh",
  "sigmah",
  "mhsme",
  "mhsmp",
  "hzu",
  "hzev",
  "hzhr",
  "hzminv",
  "hzj",
  "hzk",
  "hzkg",
  "nucs",
  "alphinv",
  "minvu",
  "minvev",
  "minvhr",
  "minvhz",
  "minvj",
  "minvk",
  "minvkg",
  "invconqu",
  "kjos",
  "ju",
  "jev",
  "jhr",
  "jhz",
  "jminv",
  "jk",
  "jkg",
  "ku",
  "Rkev",
  "khr",
  "khz",
  "kminv",
  "kj",
  "kkg",
  "kgu",
  "kgev",
  "kghr",
  "kghz",
  "kgminv",
  "kgj",
  "kgk",
  "asil",
  "d220sil",
  "n0",
  "n0std",
  "kcd",
  "flxquhs2e",
  "r",
  "mu",
  "mm12c",
  "nah",
  "mvol",
  "mvolstd",
  "mvolsil",
  "xumokalph1",
  "mcomwl",
  "gmum",
  "mumum",
  // "am",
  "amu",
  "mumumsmub",
  "mumumsmun",
  "mmu",
  "mmuc2",
  "mmuc2mev",
  "mmuu",
  "mmmu",
  "mmusme",
  "mmusmn",
  "mumumsmup",
  "mmusmp",
  "mmusmtau",
  "Nhbar",
  "Nhbarev",
  "Nmec2",
  "Nmec2mev",
  "Necomwlbar",
  "Nme",
  "mec",
  "mecmevsc",
  "nut",
  "Nc",
  "ncomwl",
  "gnn",
  "gamman",
  "gammanbar",
  "munn",
  "munsmub",
  "munsmun",
  "mn",
  "mnc2",
  "mnc2mev",
  "mnu",
  "mmn",
  "arn",
  "munsmupp",
  "munsmue",
  "mnsme",
  "mnsmmu",
  "munsmup",
  "mnmmp",
  "mnmmpc2",
  "mnmmpc2mev",
  "mnmmpu",
  "mnsmp",
  "mnsmtau",
  "bg",
  "bgspu",
  "mun",
  "munev",
  "munshcminv",
  "munskk",
  "munshhz",
  "h",
  "hev",
  "plkl",
  "plkm",
  "plkmc2gev",
  "plktmp",
  "plkt",
  "esmp",
  "pcomwl",
  "gp",
  "gammap",
  "gammapbar",
  "mup",
  "mupsmub",
  "mupsmun",
  "sigmapp",
  "mp",
  "mpc2",
  "mpc2mev",
  "mpu",
  "mmp",
  "arp",
  "rp",
  "mpsme",
  "mpsmmu",
  "mupsmunn",
  "mpsmn",
  "mpsmtau",
  "qucirchs2me",
  "hsme",
  "ecomwlbar",
  "mcomwlbar",
  "ncomwlbar",
  "hbar",
  "hbarev",
  "hbcmevf",
  "pcomwlbar",
  "tcomwlbar",
  "ryd",
  "rydchz",
  "rydhcev",
  "rydhcj",
  "s0sr",
  "s0srstd",
  "c22ndrc",
  "gammahp",
  "gammahpbar",
  "muhp",
  "muhpsmub",
  "muhpsmun",
  "muhpsmup",
  "muhpsmupp",
  "gammapp",
  "gammappbar",
  "mupp",
  "muppsmub",
  "muppsmun",
  "sdp",
  "stp",
  "c",
  "gn",
  "stdatm",
  "stdspr",
  "sigma",
  "tcomwl",
  "mtauc2mev",
  "mtau",
  "mtauc2",
  "mtauu",
  "mmtau",
  "mtausme",
  "mtausmmu",
  "mtausmn",
  "mtausmp",
  "sigmae",
  "gtn",
  "mut",
  "mutsmub",
  "mutsmun",
  "mt",
  "mtc2",
  "mtc2mev",
  "mtu",
  "mmt",
  "art",
  "mutsmup",
  "mtsme",
  "mtsmp",
  "ukg",
  "ep0",
  "mu0",
  "rk",
  "rmwmz",
  "sin2th",
  "bpwien",
  "bwien",
];

(async () => {
  const out = [];

  for (const name of names) {
    const url = `https://physics.nist.gov/cgi-bin/cuu/Value?${name}`;
    let text;
    for (let i = 0; i < 3; i += 1) {
      try {
        const res = await fetch(url);
        text = await res.text();
        break;
      } catch {
        console.log(`Retrying ${url}...`);
      }
    }

    try {
      const title = text
        .replace(/<sup>[^<]*<\/sup>/i, "")
        .match(/<title>CODATA Value:([^>]+)<\/title>/)[1]
        .trim();
      const tex = text
        .split("\n")
        .filter((x) => x.includes(`/cuu/Constants/Value/gif/${name}.gif`))
        .map((line) => line.match(/alt="([^"]+)/))
        .filter((line) => line != null)[0][1]
        .trim();
      out.push({ name, title, tex });
      console.log({ name, title, tex });
    } catch (e) {
      console.log({ url, name });
      console.log(e);
      throw new Error(`Failed on url`);
    }
  }

  fs.writeFileSync(new URL("data.json", import.meta.url), JSON.stringify(out));
})().catch(console.error);
